#map0 = affine_map<(d0) -> (d0)>
#map1 = affine_map<(d0, d1) -> (d0 + d1)>
#map2 = affine_map<(d0, d1) -> (d0 + d1 + 16)>
#map3 = affine_map<(d0) -> (d0 + 16)>
#map4 = affine_map<(d0, d1) -> (d0 + d1 + 32)>
#map5 = affine_map<(d0) -> (d0 + 32)>
#map6 = affine_map<(d0, d1) -> (d0 + d1 + 48)>
#map7 = affine_map<(d0) -> (d0 + 48)>
#map8 = affine_map<(d0, d1) -> (d0 + d1 + 64)>
#map9 = affine_map<(d0) -> (d0 + 64)>
#map10 = affine_map<(d0, d1) -> (d0 + d1 + 80)>
#map11 = affine_map<(d0) -> (d0 + 80)>
#map12 = affine_map<(d0, d1) -> (d0 + d1 + 96)>
#map13 = affine_map<(d0) -> (d0 + 96)>
#map14 = affine_map<(d0, d1) -> (d0 + d1 + 112)>
#map15 = affine_map<(d0) -> (d0 + 112)>
#map16 = affine_map<(d0, d1) -> (d0 + d1 + 1)>
#map17 = affine_map<(d0) -> (d0 + 1)>
#map18 = affine_map<(d0, d1) -> (d0 + d1 + 2)>
#map19 = affine_map<(d0) -> (d0 + 2)>
#map20 = affine_map<(d0, d1) -> (d0 + d1 + 3)>
#map21 = affine_map<(d0) -> (d0 + 3)>
#set0 = affine_set<(d0, d1)[s0, s1, s2] : (d0 - s0 >= 0, d1 - s1 * s2 >= 0)>
#set1 = affine_set<(d0, d1)[s0, s1] : (-d0 + s0 - s0 mod 4 - 1 >= 0, -d1 + s1 - s1 mod 128 - 1 >= 0)>
module {
  func.func @conv2d(%arg0: memref<?x?x?x?xf32>, %arg1: memref<?x?x?x?xf32>, %arg2: memref<?x?x?x?xf32>) {
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c8 = arith.constant 8 : index
    %c16 = arith.constant 16 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c0_0 = arith.constant 0 : index
    %0 = memref.dim %arg2, %c0_0 : memref<?x?x?x?xf32>
    %c1 = arith.constant 1 : index
    %1 = memref.dim %arg2, %c1 : memref<?x?x?x?xf32>
    %c3 = arith.constant 3 : index
    %2 = memref.dim %arg2, %c3 : memref<?x?x?x?xf32>
    %c2 = arith.constant 2 : index
    %3 = memref.dim %arg2, %c2 : memref<?x?x?x?xf32>
    %c1_1 = arith.constant 1 : index
    %4 = memref.dim %arg0, %c1_1 : memref<?x?x?x?xf32>
    %c2_2 = arith.constant 2 : index
    %5 = memref.dim %arg1, %c2_2 : memref<?x?x?x?xf32>
    %c3_3 = arith.constant 3 : index
    %6 = memref.dim %arg1, %c3_3 : memref<?x?x?x?xf32>
    %7 = memref.alloc() : memref<1xvector<16xf32>>
    affine.for %arg3 = #map0(%c0) to #map0(%0) {
      affine.for %arg4 = #map0(%c0) to #map0(%1) {
        affine.for %arg5 = #map0(%c0) to #map0(%2) {
          affine.for %arg6 = #map0(%c0) to #map0(%3) {
            %8 = vector.splat %cst : vector<16xf32>
            memref.store %8, %7[%c0] : memref<1xvector<16xf32>>
            affine.for %arg7 = #map0(%c0) to #map0(%4) {
              affine.for %arg8 = #map0(%c0) to #map0(%5) step 4 {
                affine.for %arg9 = #map0(%c0) to #map0(%6) step 128 {
                  affine.if #set0(%5, %6)[%c4, %c8, %c16] {
                    %13 = affine.apply #map1(%arg6, %arg8)
                    %14 = affine.apply #map0(%arg8)
                    %15 = affine.apply #map1(%arg5, %arg9)
                    %16 = affine.apply #map0(%arg9)
                    %cst_4 = arith.constant 0.000000e+00 : f32
                    %17 = vector.transfer_read %arg0[%arg3, %arg7, %13, %15], %cst_4 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_5 = arith.constant 0.000000e+00 : f32
                    %18 = vector.transfer_read %arg1[%arg4, %arg7, %14, %16], %cst_5 : memref<?x?x?x?xf32>, vector<16xf32>
                    %19 = affine.apply #map2(%arg5, %arg9)
                    %20 = affine.apply #map3(%arg9)
                    %cst_6 = arith.constant 0.000000e+00 : f32
                    %21 = vector.transfer_read %arg0[%arg3, %arg7, %13, %19], %cst_6 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_7 = arith.constant 0.000000e+00 : f32
                    %22 = vector.transfer_read %arg1[%arg4, %arg7, %14, %20], %cst_7 : memref<?x?x?x?xf32>, vector<16xf32>
                    %23 = affine.apply #map4(%arg5, %arg9)
                    %24 = affine.apply #map5(%arg9)
                    %cst_8 = arith.constant 0.000000e+00 : f32
                    %25 = vector.transfer_read %arg0[%arg3, %arg7, %13, %23], %cst_8 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_9 = arith.constant 0.000000e+00 : f32
                    %26 = vector.transfer_read %arg1[%arg4, %arg7, %14, %24], %cst_9 : memref<?x?x?x?xf32>, vector<16xf32>
                    %27 = affine.apply #map6(%arg5, %arg9)
                    %28 = affine.apply #map7(%arg9)
                    %cst_10 = arith.constant 0.000000e+00 : f32
                    %29 = vector.transfer_read %arg0[%arg3, %arg7, %13, %27], %cst_10 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_11 = arith.constant 0.000000e+00 : f32
                    %30 = vector.transfer_read %arg1[%arg4, %arg7, %14, %28], %cst_11 : memref<?x?x?x?xf32>, vector<16xf32>
                    %31 = affine.apply #map8(%arg5, %arg9)
                    %32 = affine.apply #map9(%arg9)
                    %cst_12 = arith.constant 0.000000e+00 : f32
                    %33 = vector.transfer_read %arg0[%arg3, %arg7, %13, %31], %cst_12 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_13 = arith.constant 0.000000e+00 : f32
                    %34 = vector.transfer_read %arg1[%arg4, %arg7, %14, %32], %cst_13 : memref<?x?x?x?xf32>, vector<16xf32>
                    %35 = affine.apply #map10(%arg5, %arg9)
                    %36 = affine.apply #map11(%arg9)
                    %cst_14 = arith.constant 0.000000e+00 : f32
                    %37 = vector.transfer_read %arg0[%arg3, %arg7, %13, %35], %cst_14 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_15 = arith.constant 0.000000e+00 : f32
                    %38 = vector.transfer_read %arg1[%arg4, %arg7, %14, %36], %cst_15 : memref<?x?x?x?xf32>, vector<16xf32>
                    %39 = affine.apply #map12(%arg5, %arg9)
                    %40 = affine.apply #map13(%arg9)
                    %cst_16 = arith.constant 0.000000e+00 : f32
                    %41 = vector.transfer_read %arg0[%arg3, %arg7, %13, %39], %cst_16 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_17 = arith.constant 0.000000e+00 : f32
                    %42 = vector.transfer_read %arg1[%arg4, %arg7, %14, %40], %cst_17 : memref<?x?x?x?xf32>, vector<16xf32>
                    %43 = affine.apply #map14(%arg5, %arg9)
                    %44 = affine.apply #map15(%arg9)
                    %cst_18 = arith.constant 0.000000e+00 : f32
                    %45 = vector.transfer_read %arg0[%arg3, %arg7, %13, %43], %cst_18 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_19 = arith.constant 0.000000e+00 : f32
                    %46 = vector.transfer_read %arg1[%arg4, %arg7, %14, %44], %cst_19 : memref<?x?x?x?xf32>, vector<16xf32>
                    %47 = affine.apply #map16(%arg6, %arg8)
                    %48 = affine.apply #map17(%arg8)
                    %49 = affine.apply #map1(%arg5, %arg9)
                    %50 = affine.apply #map0(%arg9)
                    %cst_20 = arith.constant 0.000000e+00 : f32
                    %51 = vector.transfer_read %arg0[%arg3, %arg7, %47, %49], %cst_20 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_21 = arith.constant 0.000000e+00 : f32
                    %52 = vector.transfer_read %arg1[%arg4, %arg7, %48, %50], %cst_21 : memref<?x?x?x?xf32>, vector<16xf32>
                    %53 = affine.apply #map2(%arg5, %arg9)
                    %54 = affine.apply #map3(%arg9)
                    %cst_22 = arith.constant 0.000000e+00 : f32
                    %55 = vector.transfer_read %arg0[%arg3, %arg7, %47, %53], %cst_22 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_23 = arith.constant 0.000000e+00 : f32
                    %56 = vector.transfer_read %arg1[%arg4, %arg7, %48, %54], %cst_23 : memref<?x?x?x?xf32>, vector<16xf32>
                    %57 = affine.apply #map4(%arg5, %arg9)
                    %58 = affine.apply #map5(%arg9)
                    %cst_24 = arith.constant 0.000000e+00 : f32
                    %59 = vector.transfer_read %arg0[%arg3, %arg7, %47, %57], %cst_24 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_25 = arith.constant 0.000000e+00 : f32
                    %60 = vector.transfer_read %arg1[%arg4, %arg7, %48, %58], %cst_25 : memref<?x?x?x?xf32>, vector<16xf32>
                    %61 = affine.apply #map6(%arg5, %arg9)
                    %62 = affine.apply #map7(%arg9)
                    %cst_26 = arith.constant 0.000000e+00 : f32
                    %63 = vector.transfer_read %arg0[%arg3, %arg7, %47, %61], %cst_26 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_27 = arith.constant 0.000000e+00 : f32
                    %64 = vector.transfer_read %arg1[%arg4, %arg7, %48, %62], %cst_27 : memref<?x?x?x?xf32>, vector<16xf32>
                    %65 = affine.apply #map8(%arg5, %arg9)
                    %66 = affine.apply #map9(%arg9)
                    %cst_28 = arith.constant 0.000000e+00 : f32
                    %67 = vector.transfer_read %arg0[%arg3, %arg7, %47, %65], %cst_28 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_29 = arith.constant 0.000000e+00 : f32
                    %68 = vector.transfer_read %arg1[%arg4, %arg7, %48, %66], %cst_29 : memref<?x?x?x?xf32>, vector<16xf32>
                    %69 = affine.apply #map10(%arg5, %arg9)
                    %70 = affine.apply #map11(%arg9)
                    %cst_30 = arith.constant 0.000000e+00 : f32
                    %71 = vector.transfer_read %arg0[%arg3, %arg7, %47, %69], %cst_30 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_31 = arith.constant 0.000000e+00 : f32
                    %72 = vector.transfer_read %arg1[%arg4, %arg7, %48, %70], %cst_31 : memref<?x?x?x?xf32>, vector<16xf32>
                    %73 = affine.apply #map12(%arg5, %arg9)
                    %74 = affine.apply #map13(%arg9)
                    %cst_32 = arith.constant 0.000000e+00 : f32
                    %75 = vector.transfer_read %arg0[%arg3, %arg7, %47, %73], %cst_32 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_33 = arith.constant 0.000000e+00 : f32
                    %76 = vector.transfer_read %arg1[%arg4, %arg7, %48, %74], %cst_33 : memref<?x?x?x?xf32>, vector<16xf32>
                    %77 = affine.apply #map14(%arg5, %arg9)
                    %78 = affine.apply #map15(%arg9)
                    %cst_34 = arith.constant 0.000000e+00 : f32
                    %79 = vector.transfer_read %arg0[%arg3, %arg7, %47, %77], %cst_34 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_35 = arith.constant 0.000000e+00 : f32
                    %80 = vector.transfer_read %arg1[%arg4, %arg7, %48, %78], %cst_35 : memref<?x?x?x?xf32>, vector<16xf32>
                    %81 = affine.apply #map18(%arg6, %arg8)
                    %82 = affine.apply #map19(%arg8)
                    %83 = affine.apply #map1(%arg5, %arg9)
                    %84 = affine.apply #map0(%arg9)
                    %cst_36 = arith.constant 0.000000e+00 : f32
                    %85 = vector.transfer_read %arg0[%arg3, %arg7, %81, %83], %cst_36 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_37 = arith.constant 0.000000e+00 : f32
                    %86 = vector.transfer_read %arg1[%arg4, %arg7, %82, %84], %cst_37 : memref<?x?x?x?xf32>, vector<16xf32>
                    %87 = affine.apply #map2(%arg5, %arg9)
                    %88 = affine.apply #map3(%arg9)
                    %cst_38 = arith.constant 0.000000e+00 : f32
                    %89 = vector.transfer_read %arg0[%arg3, %arg7, %81, %87], %cst_38 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_39 = arith.constant 0.000000e+00 : f32
                    %90 = vector.transfer_read %arg1[%arg4, %arg7, %82, %88], %cst_39 : memref<?x?x?x?xf32>, vector<16xf32>
                    %91 = affine.apply #map4(%arg5, %arg9)
                    %92 = affine.apply #map5(%arg9)
                    %cst_40 = arith.constant 0.000000e+00 : f32
                    %93 = vector.transfer_read %arg0[%arg3, %arg7, %81, %91], %cst_40 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_41 = arith.constant 0.000000e+00 : f32
                    %94 = vector.transfer_read %arg1[%arg4, %arg7, %82, %92], %cst_41 : memref<?x?x?x?xf32>, vector<16xf32>
                    %95 = affine.apply #map6(%arg5, %arg9)
                    %96 = affine.apply #map7(%arg9)
                    %cst_42 = arith.constant 0.000000e+00 : f32
                    %97 = vector.transfer_read %arg0[%arg3, %arg7, %81, %95], %cst_42 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_43 = arith.constant 0.000000e+00 : f32
                    %98 = vector.transfer_read %arg1[%arg4, %arg7, %82, %96], %cst_43 : memref<?x?x?x?xf32>, vector<16xf32>
                    %99 = affine.apply #map8(%arg5, %arg9)
                    %100 = affine.apply #map9(%arg9)
                    %cst_44 = arith.constant 0.000000e+00 : f32
                    %101 = vector.transfer_read %arg0[%arg3, %arg7, %81, %99], %cst_44 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_45 = arith.constant 0.000000e+00 : f32
                    %102 = vector.transfer_read %arg1[%arg4, %arg7, %82, %100], %cst_45 : memref<?x?x?x?xf32>, vector<16xf32>
                    %103 = affine.apply #map10(%arg5, %arg9)
                    %104 = affine.apply #map11(%arg9)
                    %cst_46 = arith.constant 0.000000e+00 : f32
                    %105 = vector.transfer_read %arg0[%arg3, %arg7, %81, %103], %cst_46 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_47 = arith.constant 0.000000e+00 : f32
                    %106 = vector.transfer_read %arg1[%arg4, %arg7, %82, %104], %cst_47 : memref<?x?x?x?xf32>, vector<16xf32>
                    %107 = affine.apply #map12(%arg5, %arg9)
                    %108 = affine.apply #map13(%arg9)
                    %cst_48 = arith.constant 0.000000e+00 : f32
                    %109 = vector.transfer_read %arg0[%arg3, %arg7, %81, %107], %cst_48 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_49 = arith.constant 0.000000e+00 : f32
                    %110 = vector.transfer_read %arg1[%arg4, %arg7, %82, %108], %cst_49 : memref<?x?x?x?xf32>, vector<16xf32>
                    %111 = affine.apply #map14(%arg5, %arg9)
                    %112 = affine.apply #map15(%arg9)
                    %cst_50 = arith.constant 0.000000e+00 : f32
                    %113 = vector.transfer_read %arg0[%arg3, %arg7, %81, %111], %cst_50 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_51 = arith.constant 0.000000e+00 : f32
                    %114 = vector.transfer_read %arg1[%arg4, %arg7, %82, %112], %cst_51 : memref<?x?x?x?xf32>, vector<16xf32>
                    %115 = affine.apply #map20(%arg6, %arg8)
                    %116 = affine.apply #map21(%arg8)
                    %117 = affine.apply #map1(%arg5, %arg9)
                    %118 = affine.apply #map0(%arg9)
                    %cst_52 = arith.constant 0.000000e+00 : f32
                    %119 = vector.transfer_read %arg0[%arg3, %arg7, %115, %117], %cst_52 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_53 = arith.constant 0.000000e+00 : f32
                    %120 = vector.transfer_read %arg1[%arg4, %arg7, %116, %118], %cst_53 : memref<?x?x?x?xf32>, vector<16xf32>
                    %121 = affine.apply #map2(%arg5, %arg9)
                    %122 = affine.apply #map3(%arg9)
                    %cst_54 = arith.constant 0.000000e+00 : f32
                    %123 = vector.transfer_read %arg0[%arg3, %arg7, %115, %121], %cst_54 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_55 = arith.constant 0.000000e+00 : f32
                    %124 = vector.transfer_read %arg1[%arg4, %arg7, %116, %122], %cst_55 : memref<?x?x?x?xf32>, vector<16xf32>
                    %125 = affine.apply #map4(%arg5, %arg9)
                    %126 = affine.apply #map5(%arg9)
                    %cst_56 = arith.constant 0.000000e+00 : f32
                    %127 = vector.transfer_read %arg0[%arg3, %arg7, %115, %125], %cst_56 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_57 = arith.constant 0.000000e+00 : f32
                    %128 = vector.transfer_read %arg1[%arg4, %arg7, %116, %126], %cst_57 : memref<?x?x?x?xf32>, vector<16xf32>
                    %129 = affine.apply #map6(%arg5, %arg9)
                    %130 = affine.apply #map7(%arg9)
                    %cst_58 = arith.constant 0.000000e+00 : f32
                    %131 = vector.transfer_read %arg0[%arg3, %arg7, %115, %129], %cst_58 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_59 = arith.constant 0.000000e+00 : f32
                    %132 = vector.transfer_read %arg1[%arg4, %arg7, %116, %130], %cst_59 : memref<?x?x?x?xf32>, vector<16xf32>
                    %133 = affine.apply #map8(%arg5, %arg9)
                    %134 = affine.apply #map9(%arg9)
                    %cst_60 = arith.constant 0.000000e+00 : f32
                    %135 = vector.transfer_read %arg0[%arg3, %arg7, %115, %133], %cst_60 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_61 = arith.constant 0.000000e+00 : f32
                    %136 = vector.transfer_read %arg1[%arg4, %arg7, %116, %134], %cst_61 : memref<?x?x?x?xf32>, vector<16xf32>
                    %137 = affine.apply #map10(%arg5, %arg9)
                    %138 = affine.apply #map11(%arg9)
                    %cst_62 = arith.constant 0.000000e+00 : f32
                    %139 = vector.transfer_read %arg0[%arg3, %arg7, %115, %137], %cst_62 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_63 = arith.constant 0.000000e+00 : f32
                    %140 = vector.transfer_read %arg1[%arg4, %arg7, %116, %138], %cst_63 : memref<?x?x?x?xf32>, vector<16xf32>
                    %141 = affine.apply #map12(%arg5, %arg9)
                    %142 = affine.apply #map13(%arg9)
                    %cst_64 = arith.constant 0.000000e+00 : f32
                    %143 = vector.transfer_read %arg0[%arg3, %arg7, %115, %141], %cst_64 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_65 = arith.constant 0.000000e+00 : f32
                    %144 = vector.transfer_read %arg1[%arg4, %arg7, %116, %142], %cst_65 : memref<?x?x?x?xf32>, vector<16xf32>
                    %145 = affine.apply #map14(%arg5, %arg9)
                    %146 = affine.apply #map15(%arg9)
                    %cst_66 = arith.constant 0.000000e+00 : f32
                    %147 = vector.transfer_read %arg0[%arg3, %arg7, %115, %145], %cst_66 : memref<?x?x?x?xf32>, vector<16xf32>
                    %cst_67 = arith.constant 0.000000e+00 : f32
                    %148 = vector.transfer_read %arg1[%arg4, %arg7, %116, %146], %cst_67 : memref<?x?x?x?xf32>, vector<16xf32>
                    %149 = memref.load %7[%c0] : memref<1xvector<16xf32>>
                    %150 = vector.fma %17, %18, %149 : vector<16xf32>
                    %151 = vector.fma %21, %22, %150 : vector<16xf32>
                    %152 = vector.fma %25, %26, %151 : vector<16xf32>
                    %153 = vector.fma %29, %30, %152 : vector<16xf32>
                    %154 = vector.fma %33, %34, %153 : vector<16xf32>
                    %155 = vector.fma %37, %38, %154 : vector<16xf32>
                    %156 = vector.fma %41, %42, %155 : vector<16xf32>
                    %157 = vector.fma %45, %46, %156 : vector<16xf32>
                    %158 = vector.fma %51, %52, %157 : vector<16xf32>
                    %159 = vector.fma %55, %56, %158 : vector<16xf32>
                    %160 = vector.fma %59, %60, %159 : vector<16xf32>
                    %161 = vector.fma %63, %64, %160 : vector<16xf32>
                    %162 = vector.fma %67, %68, %161 : vector<16xf32>
                    %163 = vector.fma %71, %72, %162 : vector<16xf32>
                    %164 = vector.fma %75, %76, %163 : vector<16xf32>
                    %165 = vector.fma %79, %80, %164 : vector<16xf32>
                    %166 = vector.fma %85, %86, %165 : vector<16xf32>
                    %167 = vector.fma %89, %90, %166 : vector<16xf32>
                    %168 = vector.fma %93, %94, %167 : vector<16xf32>
                    %169 = vector.fma %97, %98, %168 : vector<16xf32>
                    %170 = vector.fma %101, %102, %169 : vector<16xf32>
                    %171 = vector.fma %105, %106, %170 : vector<16xf32>
                    %172 = vector.fma %109, %110, %171 : vector<16xf32>
                    %173 = vector.fma %113, %114, %172 : vector<16xf32>
                    %174 = vector.fma %119, %120, %173 : vector<16xf32>
                    %175 = vector.fma %123, %124, %174 : vector<16xf32>
                    %176 = vector.fma %127, %128, %175 : vector<16xf32>
                    %177 = vector.fma %131, %132, %176 : vector<16xf32>
                    %178 = vector.fma %135, %136, %177 : vector<16xf32>
                    %179 = vector.fma %139, %140, %178 : vector<16xf32>
                    %180 = vector.fma %143, %144, %179 : vector<16xf32>
                    %181 = vector.fma %147, %148, %180 : vector<16xf32>
                    memref.store %181, %7[%c0] : memref<1xvector<16xf32>>
                  }
                }
              }
            }
            %9 = memref.load %7[%c0] : memref<1xvector<16xf32>>
            %10 = vector.reduction <add>, %9 : vector<16xf32> into f32
            %11 = memref.load %arg2[%arg3, %arg4, %arg6, %arg5] : memref<?x?x?x?xf32>
            %12 = arith.addf %11, %10 : f32
            memref.store %12, %arg2[%arg3, %arg4, %arg6, %arg5] : memref<?x?x?x?xf32>

// 现在这样处理肯定是不行的，对于column我们可以使用mask，row则用0代替
            affine.for %arg7 = #map0(%c0) to #map0(%4) {
              affine.for %arg8 = #map0(%c0) to #map0(%5) {
                affine.for %arg9 = #map0(%c0) to #map0(%6) {
                  affine.if #set1(%arg8, %arg9)[%5, %6] {
                  } else {
                    %13 = affine.apply #map1(%arg6, %arg8)
                    %14 = affine.apply #map1(%arg5, %arg9)
                    %15 = memref.load %arg0[%arg3, %arg7, %13, %14] : memref<?x?x?x?xf32>
                    %16 = memref.load %arg1[%arg4, %arg7, %arg8, %arg9] : memref<?x?x?x?xf32>
                    %17 = memref.load %arg2[%arg3, %arg4, %arg6, %arg5] : memref<?x?x?x?xf32>
                    %18 = arith.mulf %15, %16 : f32
                    %19 = arith.addf %18, %17 : f32
                    memref.store %19, %arg2[%arg3, %arg4, %arg6, %arg5] : memref<?x?x?x?xf32>
                  }
                }
              }
            }

          }
        }
      }
    }
    memref.dealloc %7 : memref<1xvector<16xf32>>
    return
  }
}

